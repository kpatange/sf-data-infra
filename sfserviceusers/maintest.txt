terraform {
  required_providers {

    snowflake = {
      source  = "Snowflake-Labs/snowflake"
    } 

  }
  required_version = ">= 1.2"
}



variable "snowflake_account" {
  type = string
}

variable "snowflake_organization" {
  type = string
}

variable "snowflake_user" {
  type = string
}

variable "snowflake_role" {
  type = string
}

variable "snowflake_warehouse" {
  type = string
}

variable "snowflake_authenticator" {
  type = string
}

variable "snowflake_password" {
  description = "Snowflake password"
  type        = string
}


provider "snowflake" {
  account_name         = var.snowflake_account
  organization_name    = var.snowflake_organization
  user                = var.snowflake_user
  role                = var.snowflake_role
  warehouse           = var.snowflake_warehouse
  password            = var.snowflake_password
  preview_features_enabled = [
    "snowflake_database_datasource",
    "snowflake_storage_integration_resource",
    "snowflake_stage_resource",
    "snowflake_pipe_resource",
    "snowflake_table_resource",
    "snowflake_file_format_resource"
  ]
}

resource "snowflake_execute" "create_user" {
  execute = "SELECT 1"
  revert  = "SELECT 2"
  query   = <<-SQL
    CALL PROD_ADMIN_DB.UTILS.CREATE_USER_WITH_RSA_KEY_PAIR(
    'DUMMY',
    'DUMMY',
    'DUMMY',
    'DUMMY',
    'Service account for data pipeline'
)
  SQL
}

#output "data" {
#  value = jsondecode(snowflake_execute.test.query_results[0].CREATE_USER_WITH_RSA_KEY_PAIR)
#}

# Parse the JSON data
locals {
  parsed_data = jsondecode(snowflake_execute.create_user.query_results[0].CREATE_USER_WITH_RSA_KEY_PAIR)
}

# Output variables
output "user_name" {
  value = local.parsed_data.user_name
}

output "status" {
  value = local.parsed_data.status
}

output "public_key" {
  value = local.parsed_data.public_key
}

output "private_key" {
  sensitive = true  # Mark as sensitive to hide in console/logs
  value     = local.parsed_data.private_key
}

output "private_key_jdbc" {
  sensitive = true
  value     = local.parsed_data.private_key_jdbc
}

output "passphrase" {
  sensitive = true
  value     = local.parsed_data.passhrase  # Note: Typo in source ("passhrase")
}


