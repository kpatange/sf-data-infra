terraform {
  required_providers {
    azurerm = {
      source  = "hashicorp/azurerm"
      version = "~> 3.0"
    }
    tls = {
      source  = "hashicorp/tls"
      version = "~> 4.0"
    }
    snowflake = {
      source  = "Snowflake-Labs/snowflake"
      version = "~> 0.40"
    }
    random = {
      source  = "hashicorp/random"
      version = "~> 3.0"
    }
    azuread = {
      source  = "hashicorp/azuread"
      version = "~> 2.0"
    }
  }
}

provider "azurerm" {
  features {
    key_vault {
      purge_soft_delete_on_destroy = true
    }
  }
}

# Variables
variable "snowflake_user" {
  type        = string
  description = "Snowflake username to assign the key to"
}

variable "key_vault_name" {
  type        = string
  description = "Name for the Azure Key Vault"
}

variable "resource_group_name" {
  type        = string
  description = "Azure resource group name"
}

variable "location" {
  type        = string
  description = "Azure region"
  default     = "eastus"
}

variable "key_vault_sku" {
  type        = string
  description = "SKU for Key Vault (standard or premium)"
  default     = "standard"
}

variable "tags" {
  type        = map(string)
  description = "Tags to apply to Azure resources"
  default     = {}
}

variable "key_passphrase" {
  type        = string
  description = "Passphrase for encrypting the private key"
  sensitive   = true
  default     = "" # Empty means auto-generate
}

data "azurerm_client_config" "current" {}

# Create resource group
resource "azurerm_resource_group" "rg" {
  name     = var.resource_group_name
  location = var.location
  tags     = var.tags
}

# Generate random passphrase if not provided
resource "random_password" "key_passphrase" {
  count           = var.key_passphrase == "" ? 1 : 0
  length          = 32
  special         = true
  override_special = "!@#$%^&*()-_=+[]{}<>:?"
}

locals {
  actual_passphrase = var.key_passphrase != "" ? var.key_passphrase : random_password.key_passphrase[0].result
}

# Create Azure Key Vault with RBAC
resource "azurerm_key_vault" "snowflake_keys" {
  name                       = var.key_vault_name
  location                   = azurerm_resource_group.rg.location
  resource_group_name        = azurerm_resource_group.rg.name
  tenant_id                  = data.azurerm_client_config.current.tenant_id
  sku_name                   = var.key_vault_sku
  soft_delete_retention_days = 7
  purge_protection_enabled   = true
  enable_rbac_authorization  = true
  tags                       = var.tags
}

# Assign RBAC roles
resource "azurerm_role_assignment" "current_user_secrets_officer" {
  scope                = azurerm_key_vault.snowflake_keys.id
  role_definition_name = "Key Vault Secrets Officer"
  principal_id         = data.azurerm_client_config.current.object_id
}

# Generate RSA key pair
resource "tls_private_key" "snowflake_key" {
  algorithm = "RSA"
  rsa_bits  = 2048
}

# Store unencrypted private key directly in Key Vault (Azure encrypts at rest)
resource "azurerm_key_vault_secret" "private_key" {
  name         = "snowflake-private-key"
  value        = tls_private_key.snowflake_key.private_key_pem
  key_vault_id = azurerm_key_vault.snowflake_keys.id

  depends_on = [
    azurerm_role_assignment.current_user_secrets_officer
  ]
}

# Store passphrase in Azure Key Vault
resource "azurerm_key_vault_secret" "passphrase" {
  name         = "snowflake-key-passphrase"
  value        = local.actual_passphrase
  key_vault_id = azurerm_key_vault.snowflake_keys.id
}

# Prepare public key for Snowflake
locals {
  snowflake_public_key = replace(
    replace(
      tls_private_key.snowflake_key.public_key_pem,
      "-----BEGIN PUBLIC KEY-----", ""
    ),
    "-----END PUBLIC KEY-----", ""
  )
}

# Create Snowflake user with public key
#resource "snowflake_user" "user" {
#  name           = var.snowflake_user
#  rsa_public_key = trimspace(local.snowflake_public_key)
#}

# Outputs
#output "snowflake_user" {
#  value = snowflake_user.user.name
#}

output "key_vault_name" {
  value = azurerm_key_vault.snowflake_keys.name
}

output "key_vault_uri" {
  value = azurerm_key_vault.snowflake_keys.vault_uri
}

output "important_notes" {
  value = <<-EOT
    IMPORTANT:
    1. Private key and passphrase stored in Azure Key Vault
    2. Public key assigned to Snowflake user: ${var.snowflake_user}
    3. Access Key Vault at: ${azurerm_key_vault.snowflake_keys.vault_uri}
    4. Using RBAC for access control (Key Vault Secrets Officer role assigned)
    5. Azure automatically encrypts secrets at rest - no need for pre-encryption
  EOT
}